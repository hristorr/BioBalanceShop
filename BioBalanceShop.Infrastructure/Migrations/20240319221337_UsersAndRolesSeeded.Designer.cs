// <auto-generated />
using System;
using BioBalanceShop.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BioBalanceShop.Infrastructure.Migrations
{
    [DbContext(typeof(BioBalanceDbContext))]
    [Migration("20240319221337_UsersAndRolesSeeded")]
    partial class UsersAndRolesSeeded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BioBalanceShop.Infrastructure.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Product category identificator");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Indicator if category exists");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Product category name");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("BioBalanceShop.Infrastructure.Data.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Country identificator");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasComment("Country code");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Indicator if country exists");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Country name");

                    b.Property<int>("ShopId")
                        .HasColumnType("int")
                        .HasComment("Shop identificator");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("BioBalanceShop.Infrastructure.Data.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Customer identificator");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CustomerBillingAddressId")
                        .HasColumnType("int")
                        .HasComment("Customer billing address identificator");

                    b.Property<int>("CustomerShippingAddressId")
                        .HasColumnType("int")
                        .HasComment("Customer shipping address identificator");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Indicator if customer exists");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User identificator");

                    b.HasKey("Id");

                    b.HasIndex("CustomerBillingAddressId");

                    b.HasIndex("CustomerShippingAddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("BioBalanceShop.Infrastructure.Data.Models.CustomerBillingAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Customer billing address identificator");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Customer billing address city");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasComment("Customer billing address country identificator");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Indicator if customer billing address exists");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Customer billing address post code");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Customer billing address street name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CustomerBillingAddresses");
                });

            modelBuilder.Entity("BioBalanceShop.Infrastructure.Data.Models.CustomerShippingAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Customer shipping address identificator");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Customer shipping address city");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasComment("Customer shipping address country identificator");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Indicator if customer shipping address exists");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Customer shipping address post code");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Customer shipping address street name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CustomerShippingAddresses");
                });

            modelBuilder.Entity("BioBalanceShop.Infrastructure.Data.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Order identificator");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasComment("Order currency code");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasComment("Customer identificator");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Discount amount on order level");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Indicator if order exists");

                    b.Property<decimal>("NetPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Order net price");

                    b.Property<int>("OrderBillingAddressId")
                        .HasColumnType("int")
                        .HasComment("Order billing address identificator");

                    b.Property<int>("OrderDate")
                        .HasColumnType("int")
                        .HasComment("Order date");

                    b.Property<int>("OrderNumber")
                        .HasMaxLength(20)
                        .HasColumnType("int")
                        .HasComment("Order number");

                    b.Property<int>("OrderShippingAddressId")
                        .HasColumnType("int")
                        .HasComment("Order shipping address identificator");

                    b.Property<decimal?>("ShippingFee")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Order shipping fee");

                    b.Property<int?>("ShopId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Order status");

                    b.Property<decimal?>("TaxAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Tax amount on order level");

                    b.Property<decimal>("TaxableAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Taxable amount including discount and shipping fees");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Order total price with tax");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderBillingAddressId");

                    b.HasIndex("OrderShippingAddressId");

                    b.HasIndex("ShopId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BioBalanceShop.Infrastructure.Data.Models.OrderBillingAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Order billing address identificator");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Order billing address city");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasComment("Order billing address country identificator");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Indicator if order billing address exists");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Order billing address post code");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Order billing address street name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("OrderBillingAddresses");
                });

            modelBuilder.Entity("BioBalanceShop.Infrastructure.Data.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Order item identificator");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Order item price before discounts and taxes");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("Order item category identificator");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Order item description");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Discount amount on order item level");

                    b.Property<byte[]>("ImageBack")
                        .HasColumnType("varbinary(max)")
                        .HasComment("Order item back image");

                    b.Property<byte[]>("ImageFront")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasComment("Order item front image");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Indicator if order item exists");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Order item name");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasComment("Order item order identificator");

                    b.Property<decimal>("PriceBeforeTax")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Order item net price including discount before taxes");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Order item product code");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Order item quantity");

                    b.Property<decimal?>("TaxAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Tax amount on order item level");

                    b.Property<decimal?>("TaxRate")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Tax rate on order item level");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Order item price including discounts and taxes");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("BioBalanceShop.Infrastructure.Data.Models.OrderShippingAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Order shipping address identificator");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Order shipping address city");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasComment("Order shipping address country identificator");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Indicator if order shipping address exists");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Order shipping address post code");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Order shipping address street name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("OrderShippingAddresses");
                });

            modelBuilder.Entity("BioBalanceShop.Infrastructure.Data.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Product identificator");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Product price before discounts and taxes");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("Product category identificator");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Product creator identificator");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date product was created");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Product description");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Discount amount on product level");

                    b.Property<decimal?>("DiscountRate")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Discount rate on product level");

                    b.Property<byte[]>("ImageBack")
                        .HasColumnType("varbinary(max)")
                        .HasComment("Product back image");

                    b.Property<byte[]>("ImageFront")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasComment("Product front image");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Indicator if product exists");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Product name");

                    b.Property<decimal>("PriceBeforeTax")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Product net price including discount before taxes");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Product code");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Product quantity");

                    b.Property<int>("ShopId")
                        .HasColumnType("int")
                        .HasComment("Shop identificator");

                    b.Property<decimal?>("TaxAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Tax amount on product level");

                    b.Property<decimal?>("TaxRate")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Tax rate on product level");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Product price including discounts and taxes");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ShopId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("BioBalanceShop.Infrastructure.Data.Models.Shop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Shop identificator");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasComment("Shop currency code");

                    b.Property<decimal?>("DiscountRate")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Discount rate applied to shop products");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Indicator if shop exists");

                    b.Property<byte[]>("Logotype")
                        .HasColumnType("varbinary(max)")
                        .HasComment("Shop logotype");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Shop name");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Shop owner identificator");

                    b.Property<decimal?>("ShippingFeeRate")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Shipping fee rate applied to products in cart");

                    b.Property<decimal?>("TaxRate")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Tax rate applied to shop products");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "03f649d4-5366-4680-97d0-a90777f42356",
                            ConcurrencyStamp = "91cbf97f-a30b-4601-9f3c-e7570764ff07",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "ca7cd2a7-6e5f-4e74-9df1-3b6b5fb25r53",
                            ConcurrencyStamp = "a7aa4bd2-2d73-45e6-bab3-9fe628b02517",
                            Name = "customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShopId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ShopId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "02c32793-47c7-4f3b-9487-d91c2a0e4345",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fe1ad454-c0e8-4510-80af-6724ef2490b5",
                            Email = "admin@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MAIL.COM",
                            NormalizedUserName = "ADMIN@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMUiVavCWQ2Tv+nPNL/bSKGVDkr7T6s/vpYyaxK2wQbWGkvQK+rSvykFA1dipdu4Ug==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d8b1aa6a-a90e-42a1-bdab-8151400d5032",
                            TwoFactorEnabled = false,
                            UserName = "admin@mail.com"
                        },
                        new
                        {
                            Id = "c4f1530f-2727-4bc8-9de3-075fc7420586",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5b8849df-f5c9-457e-8910-1e8fc0e95e5d",
                            Email = "customer@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER@MAIL.COM",
                            NormalizedUserName = "CUSTOMER@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOUDA/Gp9icQlKYKPo3KZ18fQJsypIWacCVUShSmr3MIdUjZq9lZCUVEeB4jbEhWeQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "212a5d34-f316-4386-b902-db8ffbe7a1bf",
                            TwoFactorEnabled = false,
                            UserName = "customer@mail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "02c32793-47c7-4f3b-9487-d91c2a0e4345",
                            RoleId = "03f649d4-5366-4680-97d0-a90777f42356"
                        },
                        new
                        {
                            UserId = "c4f1530f-2727-4bc8-9de3-075fc7420586",
                            RoleId = "ca7cd2a7-6e5f-4e74-9df1-3b6b5fb25r53"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BioBalanceShop.Infrastructure.Data.Models.Country", b =>
                {
                    b.HasOne("BioBalanceShop.Infrastructure.Data.Models.Shop", "Shop")
                        .WithMany("ShipToCountries")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("BioBalanceShop.Infrastructure.Data.Models.Customer", b =>
                {
                    b.HasOne("BioBalanceShop.Infrastructure.Data.Models.CustomerBillingAddress", "CustomerBillingAddress")
                        .WithMany()
                        .HasForeignKey("CustomerBillingAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioBalanceShop.Infrastructure.Data.Models.CustomerShippingAddress", "CustomerShippingAddress")
                        .WithMany()
                        .HasForeignKey("CustomerShippingAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerBillingAddress");

                    b.Navigation("CustomerShippingAddress");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BioBalanceShop.Infrastructure.Data.Models.CustomerBillingAddress", b =>
                {
                    b.HasOne("BioBalanceShop.Infrastructure.Data.Models.Country", "Country")
                        .WithMany("CustomerBillingAddresseses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("BioBalanceShop.Infrastructure.Data.Models.CustomerShippingAddress", b =>
                {
                    b.HasOne("BioBalanceShop.Infrastructure.Data.Models.Country", "Country")
                        .WithMany("CustomerShippingAddresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("BioBalanceShop.Infrastructure.Data.Models.Order", b =>
                {
                    b.HasOne("BioBalanceShop.Infrastructure.Data.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BioBalanceShop.Infrastructure.Data.Models.OrderBillingAddress", "OrderBillingAddress")
                        .WithMany()
                        .HasForeignKey("OrderBillingAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioBalanceShop.Infrastructure.Data.Models.OrderShippingAddress", "OrderShippingAddress")
                        .WithMany()
                        .HasForeignKey("OrderShippingAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioBalanceShop.Infrastructure.Data.Models.Shop", null)
                        .WithMany("Orders")
                        .HasForeignKey("ShopId");

                    b.Navigation("Customer");

                    b.Navigation("OrderBillingAddress");

                    b.Navigation("OrderShippingAddress");
                });

            modelBuilder.Entity("BioBalanceShop.Infrastructure.Data.Models.OrderBillingAddress", b =>
                {
                    b.HasOne("BioBalanceShop.Infrastructure.Data.Models.Country", "Country")
                        .WithMany("OrderBillingAddresseses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("BioBalanceShop.Infrastructure.Data.Models.OrderItem", b =>
                {
                    b.HasOne("BioBalanceShop.Infrastructure.Data.Models.Category", "Category")
                        .WithMany("OrderItems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BioBalanceShop.Infrastructure.Data.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BioBalanceShop.Infrastructure.Data.Models.OrderShippingAddress", b =>
                {
                    b.HasOne("BioBalanceShop.Infrastructure.Data.Models.Country", "Country")
                        .WithMany("OrderShippingAddresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("BioBalanceShop.Infrastructure.Data.Models.Product", b =>
                {
                    b.HasOne("BioBalanceShop.Infrastructure.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioBalanceShop.Infrastructure.Data.Models.Shop", "Shop")
                        .WithMany("Products")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("CreatedBy");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("BioBalanceShop.Infrastructure.Data.Models.Shop", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.HasOne("BioBalanceShop.Infrastructure.Data.Models.Shop", null)
                        .WithMany("Users")
                        .HasForeignKey("ShopId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BioBalanceShop.Infrastructure.Data.Models.Category", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("BioBalanceShop.Infrastructure.Data.Models.Country", b =>
                {
                    b.Navigation("CustomerBillingAddresseses");

                    b.Navigation("CustomerShippingAddresses");

                    b.Navigation("OrderBillingAddresseses");

                    b.Navigation("OrderShippingAddresses");
                });

            modelBuilder.Entity("BioBalanceShop.Infrastructure.Data.Models.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BioBalanceShop.Infrastructure.Data.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("BioBalanceShop.Infrastructure.Data.Models.Shop", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Products");

                    b.Navigation("ShipToCountries");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
